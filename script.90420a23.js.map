{"version":3,"sources":["node_modules/frappe-gantt/src/date_utils.js","node_modules/frappe-gantt/src/svg_utils.js","node_modules/frappe-gantt/src/bar.js","node_modules/frappe-gantt/src/arrow.js","node_modules/frappe-gantt/src/popup.js","node_modules/frappe-gantt/src/index.js","script.js"],"names":["YEAR","MONTH","DAY","HOUR","MINUTE","SECOND","MILLISECOND","month_names","en","es","ru","ptBr","fr","tr","zh","_default","parse","date","date_separator","time_separator","Date","date_parts","time_parts","parts","split","map","val","parseInt","vals","length","parseFloat","concat","to_string","with_time","TypeError","get_date_values","i","padStart","date_string","time_string","format","format_string","lang","values","d","format_map","YYYY","MM","DD","HH","mm","ss","SSS","D","MMMM","MMM","str","formatted_values","Object","keys","sort","a","b","forEach","key","includes","replace","push","value","diff","date_a","date_b","scale","milliseconds","seconds","hours","minutes","days","months","years","endsWith","Math","floor","today","slice","now","add","qty","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","getMilliseconds","start_of","scores","should_reset","_scale","max_score","clone","get_days_in_month","no_of_days","month","year","targetLength","padString","String","repeat","exports","default","$","expr","con","document","querySelector","createSVG","tag","attrs","elem","createElementNS","attr","append_to","appendChild","innerHTML","setAttribute","animateSVG","svgElement","from","to","animatedSvgElement","getAnimationElement","event","createEvent","initEvent","eventName","dispatchEvent","dur","begin","animEl","attributeName","animateElement","calcMode","keyTimes","keySplines","cubic_bezier","name","ease","linear","on","element","selector","callback","delegate","bind","off","handler","removeEventListener","addEventListener","e","delegatedTarget","target","closest","call","matches","parentNode","getAttribute","_date_utils","_interopRequireDefault","require","_svg_utils","obj","__esModule","Bar","constructor","gantt","task","set_defaults","prepare","draw","action_completed","prepare_values","prepare_helpers","invalid","height","options","bar_height","x","compute_x","y","compute_y","corner_radius","bar_corner_radius","duration","date_utils","_end","_start","step","width","column_width","progress_width","progress","group","class","custom_class","id","bar_group","handle_group","SVGElement","prototype","getX","getY","getWidth","getHeight","getEndX","draw_bar","draw_progress_bar","draw_label","draw_resize_handles","$bar","rx","ry","classList","$bar_progress","requestAnimationFrame","update_label_position","bar","$handle_progress","points","get_progress_polygon_points","join","bar_progress","setup_click_event","popup_trigger","show_popup","unselect_all","trigger_event","bar_being_dragged","subtitle","language","target_element","title","update_bar_position","dependencies","dep","get_bar","reduce","prev","curr","update_attr","update_handle_position","update_progressbar_position","update_arrow_position","date_changed","changed","new_start_date","new_end_date","compute_start_end_date","Number","progress_changed","new_progress","compute_progress","set_action_completed","setTimeout","x_in_units","gantt_start","width_in_units","task_start","view_is","header_height","padding","_index","get_snap_position","dx","rem","position","odx","isNaN","label","getBBox","remove","handle","arrows","arrow","update","isFunction","functionToCheck","toString","Arrow","from_task","to_task","calculate_path","start_x","condition","start_y","end_x","end_y","from_is_below_to","curve","arrow_curve","clockwise","curve_y","offset","path","down_1","down_2","left","Popup","parent","custom_html","make","hide","pointer","show","Error","html","style","clientWidth","position_meta","HTMLElement","getBoundingClientRect","top","transform","opacity","_bar","_arrow","_popup","VIEW_MODE","QUARTER_DAY","HALF_DAY","WEEK","Gantt","wrapper","tasks","setup_wrapper","setup_options","setup_tasks","change_view_mode","bind_events","svg_element","wrapper_element","$svg","$container","createElement","parentElement","popup_wrapper","default_options","view_modes","view_mode","date_format","custom_popup_html","assign","start","end","every","deps","trim","filter","generate_id","setup_dependencies","dependency_map","t","refresh","mode","update_view_scale","setup_dates","render","setup_gantt_dates","setup_date_values","gantt_end","dates","cur_date","bind_grid_click","bind_bar_events","clear","setup_layers","make_grid","make_dates","make_bars","make_arrows","map_arrows_on_bars","set_width","set_scroll_position","layers","layer","make_grid_background","make_grid_rows","make_grid_header","make_grid_ticks","make_grid_highlights","grid_width","grid_height","grid","rows_layer","lines_layer","row_width","row_height","row_y","x1","y1","x2","y2","header_width","tick_x","tick_y","tick_height","tick_class","get_dates_to_draw","lower_x","lower_y","lower_text","upper_text","$upper_text","upper_x","upper_y","last_date","get_date_info","date_text","Day_lower","Week_lower","Month_lower","Year_lower","Day_upper","Week_upper","Month_upper","Year_upper","base_pos","x_pos","bars","task_id","dependency","get_task","Boolean","cur_width","actual_width","parent_element","scroll_pos","get_oldest_starting_date","scrollLeft","hide_popup","is_dragging","x_on_start","y_on_start","is_resizing_left","is_resizing_right","parent_bar_id","bar_wrapper","contains","offsetX","offsetY","ids","get_all_dependent_tasks","ox","oy","owidth","finaldx","bind_bar_progress","is_resizing","min_dx","max_dx","$handle","out","to_process","acc","querySelectorAll","el","modes","Array","isArray","some","find","popup","args","apply","prev_date","random","_frappeGantt2"],"mappings":"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","file":"script.90420a23.js","sourceRoot":"..","sourcesContent":["const YEAR = 'year';\nconst MONTH = 'month';\nconst DAY = 'day';\nconst HOUR = 'hour';\nconst MINUTE = 'minute';\nconst SECOND = 'second';\nconst MILLISECOND = 'millisecond';\n\nconst month_names = {\n    en: [\n        'January',\n        'February',\n        'March',\n        'April',\n        'May',\n        'June',\n        'July',\n        'August',\n        'September',\n        'October',\n        'November',\n        'December',\n    ],\n    es: [\n        'Enero',\n        'Febrero',\n        'Marzo',\n        'Abril',\n        'Mayo',\n        'Junio',\n        'Julio',\n        'Agosto',\n        'Septiembre',\n        'Octubre',\n        'Noviembre',\n        'Diciembre',\n    ],\n    ru: [\n        'Январь',\n        'Февраль',\n        'Март',\n        'Апрель',\n        'Май',\n        'Июнь',\n        'Июль',\n        'Август',\n        'Сентябрь',\n        'Октябрь',\n        'Ноябрь',\n        'Декабрь',\n    ],\n    ptBr: [\n        'Janeiro',\n        'Fevereiro',\n        'Março',\n        'Abril',\n        'Maio',\n        'Junho',\n        'Julho',\n        'Agosto',\n        'Setembro',\n        'Outubro',\n        'Novembro',\n        'Dezembro',\n    ],\n    fr: [\n        'Janvier',\n        'Février',\n        'Mars',\n        'Avril',\n        'Mai',\n        'Juin',\n        'Juillet',\n        'Août',\n        'Septembre',\n        'Octobre',\n        'Novembre',\n        'Décembre',\n    ],\n    tr: [\n        'Ocak',\n        'Şubat',\n        'Mart',\n        'Nisan',\n        'Mayıs',\n        'Haziran',\n        'Temmuz',\n        'Ağustos',\n        'Eylül',\n        'Ekim',\n        'Kasım',\n        'Aralık',\n    ],\n    zh: [\n        '一月',\n        '二月',\n        '三月',\n        '四月',\n        '五月',\n        '六月',\n        '七月',\n        '八月',\n        '九月',\n        '十月',\n        '十一月',\n        '十二月',\n    ],\n};\n\nexport default {\n    parse(date, date_separator = '-', time_separator = /[.:]/) {\n        if (date instanceof Date) {\n            return date;\n        }\n        if (typeof date === 'string') {\n            let date_parts, time_parts;\n            const parts = date.split(' ');\n\n            date_parts = parts[0]\n                .split(date_separator)\n                .map((val) => parseInt(val, 10));\n            time_parts = parts[1] && parts[1].split(time_separator);\n\n            // month is 0 indexed\n            date_parts[1] = date_parts[1] - 1;\n\n            let vals = date_parts;\n\n            if (time_parts && time_parts.length) {\n                if (time_parts.length == 4) {\n                    time_parts[3] = '0.' + time_parts[3];\n                    time_parts[3] = parseFloat(time_parts[3]) * 1000;\n                }\n                vals = vals.concat(time_parts);\n            }\n\n            return new Date(...vals);\n        }\n    },\n\n    to_string(date, with_time = false) {\n        if (!(date instanceof Date)) {\n            throw new TypeError('Invalid argument type');\n        }\n        const vals = this.get_date_values(date).map((val, i) => {\n            if (i === 1) {\n                // add 1 for month\n                val = val + 1;\n            }\n\n            if (i === 6) {\n                return padStart(val + '', 3, '0');\n            }\n\n            return padStart(val + '', 2, '0');\n        });\n        const date_string = `${vals[0]}-${vals[1]}-${vals[2]}`;\n        const time_string = `${vals[3]}:${vals[4]}:${vals[5]}.${vals[6]}`;\n\n        return date_string + (with_time ? ' ' + time_string : '');\n    },\n\n    format(date, format_string = 'YYYY-MM-DD HH:mm:ss.SSS', lang = 'en') {\n        const values = this.get_date_values(date).map((d) => padStart(d, 2, 0));\n        const format_map = {\n            YYYY: values[0],\n            MM: padStart(+values[1] + 1, 2, 0),\n            DD: values[2],\n            HH: values[3],\n            mm: values[4],\n            ss: values[5],\n            SSS: values[6],\n            D: values[2],\n            MMMM: month_names[lang][+values[1]],\n            MMM: month_names[lang][+values[1]],\n        };\n\n        let str = format_string;\n        const formatted_values = [];\n\n        Object.keys(format_map)\n            .sort((a, b) => b.length - a.length) // big string first\n            .forEach((key) => {\n                if (str.includes(key)) {\n                    str = str.replace(key, `$${formatted_values.length}`);\n                    formatted_values.push(format_map[key]);\n                }\n            });\n\n        formatted_values.forEach((value, i) => {\n            str = str.replace(`$${i}`, value);\n        });\n\n        return str;\n    },\n\n    diff(date_a, date_b, scale = DAY) {\n        let milliseconds, seconds, hours, minutes, days, months, years;\n\n        milliseconds = date_a - date_b;\n        seconds = milliseconds / 1000;\n        minutes = seconds / 60;\n        hours = minutes / 60;\n        days = hours / 24;\n        months = days / 30;\n        years = months / 12;\n\n        if (!scale.endsWith('s')) {\n            scale += 's';\n        }\n\n        return Math.floor(\n            {\n                milliseconds,\n                seconds,\n                minutes,\n                hours,\n                days,\n                months,\n                years,\n            }[scale]\n        );\n    },\n\n    today() {\n        const vals = this.get_date_values(new Date()).slice(0, 3);\n        return new Date(...vals);\n    },\n\n    now() {\n        return new Date();\n    },\n\n    add(date, qty, scale) {\n        qty = parseInt(qty, 10);\n        const vals = [\n            date.getFullYear() + (scale === YEAR ? qty : 0),\n            date.getMonth() + (scale === MONTH ? qty : 0),\n            date.getDate() + (scale === DAY ? qty : 0),\n            date.getHours() + (scale === HOUR ? qty : 0),\n            date.getMinutes() + (scale === MINUTE ? qty : 0),\n            date.getSeconds() + (scale === SECOND ? qty : 0),\n            date.getMilliseconds() + (scale === MILLISECOND ? qty : 0),\n        ];\n        return new Date(...vals);\n    },\n\n    start_of(date, scale) {\n        const scores = {\n            [YEAR]: 6,\n            [MONTH]: 5,\n            [DAY]: 4,\n            [HOUR]: 3,\n            [MINUTE]: 2,\n            [SECOND]: 1,\n            [MILLISECOND]: 0,\n        };\n\n        function should_reset(_scale) {\n            const max_score = scores[scale];\n            return scores[_scale] <= max_score;\n        }\n\n        const vals = [\n            date.getFullYear(),\n            should_reset(YEAR) ? 0 : date.getMonth(),\n            should_reset(MONTH) ? 1 : date.getDate(),\n            should_reset(DAY) ? 0 : date.getHours(),\n            should_reset(HOUR) ? 0 : date.getMinutes(),\n            should_reset(MINUTE) ? 0 : date.getSeconds(),\n            should_reset(SECOND) ? 0 : date.getMilliseconds(),\n        ];\n\n        return new Date(...vals);\n    },\n\n    clone(date) {\n        return new Date(...this.get_date_values(date));\n    },\n\n    get_date_values(date) {\n        return [\n            date.getFullYear(),\n            date.getMonth(),\n            date.getDate(),\n            date.getHours(),\n            date.getMinutes(),\n            date.getSeconds(),\n            date.getMilliseconds(),\n        ];\n    },\n\n    get_days_in_month(date) {\n        const no_of_days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n\n        const month = date.getMonth();\n\n        if (month !== 1) {\n            return no_of_days[month];\n        }\n\n        // Feb\n        const year = date.getFullYear();\n        if ((year % 4 == 0 && year % 100 != 0) || year % 400 == 0) {\n            return 29;\n        }\n        return 28;\n    },\n};\n\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/padStart\nfunction padStart(str, targetLength, padString) {\n    str = str + '';\n    targetLength = targetLength >> 0;\n    padString = String(typeof padString !== 'undefined' ? padString : ' ');\n    if (str.length > targetLength) {\n        return String(str);\n    } else {\n        targetLength = targetLength - str.length;\n        if (targetLength > padString.length) {\n            padString += padString.repeat(targetLength / padString.length);\n        }\n        return padString.slice(0, targetLength) + String(str);\n    }\n}\n","export function $(expr, con) {\n    return typeof expr === 'string'\n        ? (con || document).querySelector(expr)\n        : expr || null;\n}\n\nexport function createSVG(tag, attrs) {\n    const elem = document.createElementNS('http://www.w3.org/2000/svg', tag);\n    for (let attr in attrs) {\n        if (attr === 'append_to') {\n            const parent = attrs.append_to;\n            parent.appendChild(elem);\n        } else if (attr === 'innerHTML') {\n            elem.innerHTML = attrs.innerHTML;\n        } else {\n            elem.setAttribute(attr, attrs[attr]);\n        }\n    }\n    return elem;\n}\n\nexport function animateSVG(svgElement, attr, from, to) {\n    const animatedSvgElement = getAnimationElement(svgElement, attr, from, to);\n\n    if (animatedSvgElement === svgElement) {\n        // triggered 2nd time programmatically\n        // trigger artificial click event\n        const event = document.createEvent('HTMLEvents');\n        event.initEvent('click', true, true);\n        event.eventName = 'click';\n        animatedSvgElement.dispatchEvent(event);\n    }\n}\n\nfunction getAnimationElement(\n    svgElement,\n    attr,\n    from,\n    to,\n    dur = '0.4s',\n    begin = '0.1s'\n) {\n    const animEl = svgElement.querySelector('animate');\n    if (animEl) {\n        $.attr(animEl, {\n            attributeName: attr,\n            from,\n            to,\n            dur,\n            begin: 'click + ' + begin, // artificial click\n        });\n        return svgElement;\n    }\n\n    const animateElement = createSVG('animate', {\n        attributeName: attr,\n        from,\n        to,\n        dur,\n        begin,\n        calcMode: 'spline',\n        values: from + ';' + to,\n        keyTimes: '0; 1',\n        keySplines: cubic_bezier('ease-out'),\n    });\n    svgElement.appendChild(animateElement);\n\n    return svgElement;\n}\n\nfunction cubic_bezier(name) {\n    return {\n        ease: '.25 .1 .25 1',\n        linear: '0 0 1 1',\n        'ease-in': '.42 0 1 1',\n        'ease-out': '0 0 .58 1',\n        'ease-in-out': '.42 0 .58 1',\n    }[name];\n}\n\n$.on = (element, event, selector, callback) => {\n    if (!callback) {\n        callback = selector;\n        $.bind(element, event, callback);\n    } else {\n        $.delegate(element, event, selector, callback);\n    }\n};\n\n$.off = (element, event, handler) => {\n    element.removeEventListener(event, handler);\n};\n\n$.bind = (element, event, callback) => {\n    event.split(/\\s+/).forEach(function (event) {\n        element.addEventListener(event, callback);\n    });\n};\n\n$.delegate = (element, event, selector, callback) => {\n    element.addEventListener(event, function (e) {\n        const delegatedTarget = e.target.closest(selector);\n        if (delegatedTarget) {\n            e.delegatedTarget = delegatedTarget;\n            callback.call(this, e, delegatedTarget);\n        }\n    });\n};\n\n$.closest = (selector, element) => {\n    if (!element) return null;\n\n    if (element.matches(selector)) {\n        return element;\n    }\n\n    return $.closest(selector, element.parentNode);\n};\n\n$.attr = (element, attr, value) => {\n    if (!value && typeof attr === 'string') {\n        return element.getAttribute(attr);\n    }\n\n    if (typeof attr === 'object') {\n        for (let key in attr) {\n            $.attr(element, key, attr[key]);\n        }\n        return;\n    }\n\n    element.setAttribute(attr, value);\n};\n","import date_utils from './date_utils';\nimport { $, createSVG, animateSVG } from './svg_utils';\n\nexport default class Bar {\n    constructor(gantt, task) {\n        this.set_defaults(gantt, task);\n        this.prepare();\n        this.draw();\n        this.bind();\n    }\n\n    set_defaults(gantt, task) {\n        this.action_completed = false;\n        this.gantt = gantt;\n        this.task = task;\n    }\n\n    prepare() {\n        this.prepare_values();\n        this.prepare_helpers();\n    }\n\n    prepare_values() {\n        this.invalid = this.task.invalid;\n        this.height = this.gantt.options.bar_height;\n        this.x = this.compute_x();\n        this.y = this.compute_y();\n        this.corner_radius = this.gantt.options.bar_corner_radius;\n        this.duration =\n            date_utils.diff(this.task._end, this.task._start, 'hour') /\n            this.gantt.options.step;\n        this.width = this.gantt.options.column_width * this.duration;\n        this.progress_width =\n            this.gantt.options.column_width *\n                this.duration *\n                (this.task.progress / 100) || 0;\n        this.group = createSVG('g', {\n            class: 'bar-wrapper ' + (this.task.custom_class || ''),\n            'data-id': this.task.id,\n        });\n        this.bar_group = createSVG('g', {\n            class: 'bar-group',\n            append_to: this.group,\n        });\n        this.handle_group = createSVG('g', {\n            class: 'handle-group',\n            append_to: this.group,\n        });\n    }\n\n    prepare_helpers() {\n        SVGElement.prototype.getX = function () {\n            return +this.getAttribute('x');\n        };\n        SVGElement.prototype.getY = function () {\n            return +this.getAttribute('y');\n        };\n        SVGElement.prototype.getWidth = function () {\n            return +this.getAttribute('width');\n        };\n        SVGElement.prototype.getHeight = function () {\n            return +this.getAttribute('height');\n        };\n        SVGElement.prototype.getEndX = function () {\n            return this.getX() + this.getWidth();\n        };\n    }\n\n    draw() {\n        this.draw_bar();\n        this.draw_progress_bar();\n        this.draw_label();\n        this.draw_resize_handles();\n    }\n\n    draw_bar() {\n        this.$bar = createSVG('rect', {\n            x: this.x,\n            y: this.y,\n            width: this.width,\n            height: this.height,\n            rx: this.corner_radius,\n            ry: this.corner_radius,\n            class: 'bar',\n            append_to: this.bar_group,\n        });\n\n        animateSVG(this.$bar, 'width', 0, this.width);\n\n        if (this.invalid) {\n            this.$bar.classList.add('bar-invalid');\n        }\n    }\n\n    draw_progress_bar() {\n        if (this.invalid) return;\n        this.$bar_progress = createSVG('rect', {\n            x: this.x,\n            y: this.y,\n            width: this.progress_width,\n            height: this.height,\n            rx: this.corner_radius,\n            ry: this.corner_radius,\n            class: 'bar-progress',\n            append_to: this.bar_group,\n        });\n\n        animateSVG(this.$bar_progress, 'width', 0, this.progress_width);\n    }\n\n    draw_label() {\n        createSVG('text', {\n            x: this.x + this.width / 2,\n            y: this.y + this.height / 2,\n            innerHTML: this.task.name,\n            class: 'bar-label',\n            append_to: this.bar_group,\n        });\n        // labels get BBox in the next tick\n        requestAnimationFrame(() => this.update_label_position());\n    }\n\n    draw_resize_handles() {\n        if (this.invalid) return;\n\n        const bar = this.$bar;\n        const handle_width = 8;\n\n        createSVG('rect', {\n            x: bar.getX() + bar.getWidth() - 9,\n            y: bar.getY() + 1,\n            width: handle_width,\n            height: this.height - 2,\n            rx: this.corner_radius,\n            ry: this.corner_radius,\n            class: 'handle right',\n            append_to: this.handle_group,\n        });\n\n        createSVG('rect', {\n            x: bar.getX() + 1,\n            y: bar.getY() + 1,\n            width: handle_width,\n            height: this.height - 2,\n            rx: this.corner_radius,\n            ry: this.corner_radius,\n            class: 'handle left',\n            append_to: this.handle_group,\n        });\n\n        if (this.task.progress && this.task.progress < 100) {\n            this.$handle_progress = createSVG('polygon', {\n                points: this.get_progress_polygon_points().join(','),\n                class: 'handle progress',\n                append_to: this.handle_group,\n            });\n        }\n    }\n\n    get_progress_polygon_points() {\n        const bar_progress = this.$bar_progress;\n        return [\n            bar_progress.getEndX() - 5,\n            bar_progress.getY() + bar_progress.getHeight(),\n            bar_progress.getEndX() + 5,\n            bar_progress.getY() + bar_progress.getHeight(),\n            bar_progress.getEndX(),\n            bar_progress.getY() + bar_progress.getHeight() - 8.66,\n        ];\n    }\n\n    bind() {\n        if (this.invalid) return;\n        this.setup_click_event();\n    }\n\n    setup_click_event() {\n        $.on(this.group, 'focus ' + this.gantt.options.popup_trigger, (e) => {\n            if (this.action_completed) {\n                // just finished a move action, wait for a few seconds\n                return;\n            }\n\n            this.show_popup();\n            this.gantt.unselect_all();\n            this.group.classList.add('active');\n        });\n\n        $.on(this.group, 'dblclick', (e) => {\n            if (this.action_completed) {\n                // just finished a move action, wait for a few seconds\n                return;\n            }\n\n            this.gantt.trigger_event('click', [this.task]);\n        });\n    }\n\n    show_popup() {\n        if (this.gantt.bar_being_dragged) return;\n\n        const start_date = date_utils.format(\n            this.task._start,\n            'MMM D',\n            this.gantt.options.language\n        );\n        const end_date = date_utils.format(\n            date_utils.add(this.task._end, -1, 'second'),\n            'MMM D',\n            this.gantt.options.language\n        );\n        const subtitle = start_date + ' - ' + end_date;\n\n        this.gantt.show_popup({\n            target_element: this.$bar,\n            title: this.task.name,\n            subtitle: subtitle,\n            task: this.task,\n        });\n    }\n\n    update_bar_position({ x = null, width = null }) {\n        const bar = this.$bar;\n        if (x) {\n            // get all x values of parent task\n            const xs = this.task.dependencies.map((dep) => {\n                return this.gantt.get_bar(dep).$bar.getX();\n            });\n            // child task must not go before parent\n            const valid_x = xs.reduce((prev, curr) => {\n                return x >= curr;\n            }, x);\n            if (!valid_x) {\n                width = null;\n                return;\n            }\n            this.update_attr(bar, 'x', x);\n        }\n        if (width && width >= this.gantt.options.column_width) {\n            this.update_attr(bar, 'width', width);\n        }\n        this.update_label_position();\n        this.update_handle_position();\n        this.update_progressbar_position();\n        this.update_arrow_position();\n    }\n\n    date_changed() {\n        let changed = false;\n        const { new_start_date, new_end_date } = this.compute_start_end_date();\n\n        if (Number(this.task._start) !== Number(new_start_date)) {\n            changed = true;\n            this.task._start = new_start_date;\n        }\n\n        if (Number(this.task._end) !== Number(new_end_date)) {\n            changed = true;\n            this.task._end = new_end_date;\n        }\n\n        if (!changed) return;\n\n        this.gantt.trigger_event('date_change', [\n            this.task,\n            new_start_date,\n            date_utils.add(new_end_date, -1, 'second'),\n        ]);\n    }\n\n    progress_changed() {\n        const new_progress = this.compute_progress();\n        this.task.progress = new_progress;\n        this.gantt.trigger_event('progress_change', [this.task, new_progress]);\n    }\n\n    set_action_completed() {\n        this.action_completed = true;\n        setTimeout(() => (this.action_completed = false), 1000);\n    }\n\n    compute_start_end_date() {\n        const bar = this.$bar;\n        const x_in_units = bar.getX() / this.gantt.options.column_width;\n        const new_start_date = date_utils.add(\n            this.gantt.gantt_start,\n            x_in_units * this.gantt.options.step,\n            'hour'\n        );\n        const width_in_units = bar.getWidth() / this.gantt.options.column_width;\n        const new_end_date = date_utils.add(\n            new_start_date,\n            width_in_units * this.gantt.options.step,\n            'hour'\n        );\n\n        return { new_start_date, new_end_date };\n    }\n\n    compute_progress() {\n        const progress =\n            (this.$bar_progress.getWidth() / this.$bar.getWidth()) * 100;\n        return parseInt(progress, 10);\n    }\n\n    compute_x() {\n        const { step, column_width } = this.gantt.options;\n        const task_start = this.task._start;\n        const gantt_start = this.gantt.gantt_start;\n\n        const diff = date_utils.diff(task_start, gantt_start, 'hour');\n        let x = (diff / step) * column_width;\n\n        if (this.gantt.view_is('Month')) {\n            const diff = date_utils.diff(task_start, gantt_start, 'day');\n            x = (diff * column_width) / 30;\n        }\n        return x;\n    }\n\n    compute_y() {\n        return (\n            this.gantt.options.header_height +\n            this.gantt.options.padding +\n            this.task._index * (this.height + this.gantt.options.padding)\n        );\n    }\n\n    get_snap_position(dx) {\n        let odx = dx,\n            rem,\n            position;\n\n        if (this.gantt.view_is('Week')) {\n            rem = dx % (this.gantt.options.column_width / 7);\n            position =\n                odx -\n                rem +\n                (rem < this.gantt.options.column_width / 14\n                    ? 0\n                    : this.gantt.options.column_width / 7);\n        } else if (this.gantt.view_is('Month')) {\n            rem = dx % (this.gantt.options.column_width / 30);\n            position =\n                odx -\n                rem +\n                (rem < this.gantt.options.column_width / 60\n                    ? 0\n                    : this.gantt.options.column_width / 30);\n        } else {\n            rem = dx % this.gantt.options.column_width;\n            position =\n                odx -\n                rem +\n                (rem < this.gantt.options.column_width / 2\n                    ? 0\n                    : this.gantt.options.column_width);\n        }\n        return position;\n    }\n\n    update_attr(element, attr, value) {\n        value = +value;\n        if (!isNaN(value)) {\n            element.setAttribute(attr, value);\n        }\n        return element;\n    }\n\n    update_progressbar_position() {\n        this.$bar_progress.setAttribute('x', this.$bar.getX());\n        this.$bar_progress.setAttribute(\n            'width',\n            this.$bar.getWidth() * (this.task.progress / 100)\n        );\n    }\n\n    update_label_position() {\n        const bar = this.$bar,\n            label = this.group.querySelector('.bar-label');\n\n        if (label.getBBox().width > bar.getWidth()) {\n            label.classList.add('big');\n            label.setAttribute('x', bar.getX() + bar.getWidth() + 5);\n        } else {\n            label.classList.remove('big');\n            label.setAttribute('x', bar.getX() + bar.getWidth() / 2);\n        }\n    }\n\n    update_handle_position() {\n        const bar = this.$bar;\n        this.handle_group\n            .querySelector('.handle.left')\n            .setAttribute('x', bar.getX() + 1);\n        this.handle_group\n            .querySelector('.handle.right')\n            .setAttribute('x', bar.getEndX() - 9);\n        const handle = this.group.querySelector('.handle.progress');\n        handle &&\n            handle.setAttribute('points', this.get_progress_polygon_points());\n    }\n\n    update_arrow_position() {\n        this.arrows = this.arrows || [];\n        for (let arrow of this.arrows) {\n            arrow.update();\n        }\n    }\n}\n\nfunction isFunction(functionToCheck) {\n    var getType = {};\n    return (\n        functionToCheck &&\n        getType.toString.call(functionToCheck) === '[object Function]'\n    );\n}\n","import { createSVG } from './svg_utils';\n\nexport default class Arrow {\n    constructor(gantt, from_task, to_task) {\n        this.gantt = gantt;\n        this.from_task = from_task;\n        this.to_task = to_task;\n\n        this.calculate_path();\n        this.draw();\n    }\n\n    calculate_path() {\n        let start_x =\n            this.from_task.$bar.getX() + this.from_task.$bar.getWidth() / 2;\n\n        const condition = () =>\n            this.to_task.$bar.getX() < start_x + this.gantt.options.padding &&\n            start_x > this.from_task.$bar.getX() + this.gantt.options.padding;\n\n        while (condition()) {\n            start_x -= 10;\n        }\n\n        const start_y =\n            this.gantt.options.header_height +\n            this.gantt.options.bar_height +\n            (this.gantt.options.padding + this.gantt.options.bar_height) *\n                this.from_task.task._index +\n            this.gantt.options.padding;\n\n        const end_x = this.to_task.$bar.getX() - this.gantt.options.padding / 2;\n        const end_y =\n            this.gantt.options.header_height +\n            this.gantt.options.bar_height / 2 +\n            (this.gantt.options.padding + this.gantt.options.bar_height) *\n                this.to_task.task._index +\n            this.gantt.options.padding;\n\n        const from_is_below_to =\n            this.from_task.task._index > this.to_task.task._index;\n        const curve = this.gantt.options.arrow_curve;\n        const clockwise = from_is_below_to ? 1 : 0;\n        const curve_y = from_is_below_to ? -curve : curve;\n        const offset = from_is_below_to\n            ? end_y + this.gantt.options.arrow_curve\n            : end_y - this.gantt.options.arrow_curve;\n\n        this.path = `\n            M ${start_x} ${start_y}\n            V ${offset}\n            a ${curve} ${curve} 0 0 ${clockwise} ${curve} ${curve_y}\n            L ${end_x} ${end_y}\n            m -5 -5\n            l 5 5\n            l -5 5`;\n\n        if (\n            this.to_task.$bar.getX() <\n            this.from_task.$bar.getX() + this.gantt.options.padding\n        ) {\n            const down_1 = this.gantt.options.padding / 2 - curve;\n            const down_2 =\n                this.to_task.$bar.getY() +\n                this.to_task.$bar.getHeight() / 2 -\n                curve_y;\n            const left = this.to_task.$bar.getX() - this.gantt.options.padding;\n\n            this.path = `\n                M ${start_x} ${start_y}\n                v ${down_1}\n                a ${curve} ${curve} 0 0 1 -${curve} ${curve}\n                H ${left}\n                a ${curve} ${curve} 0 0 ${clockwise} -${curve} ${curve_y}\n                V ${down_2}\n                a ${curve} ${curve} 0 0 ${clockwise} ${curve} ${curve_y}\n                L ${end_x} ${end_y}\n                m -5 -5\n                l 5 5\n                l -5 5`;\n        }\n    }\n\n    draw() {\n        this.element = createSVG('path', {\n            d: this.path,\n            'data-from': this.from_task.task.id,\n            'data-to': this.to_task.task.id,\n        });\n    }\n\n    update() {\n        this.calculate_path();\n        this.element.setAttribute('d', this.path);\n    }\n}\n","export default class Popup {\n    constructor(parent, custom_html) {\n        this.parent = parent;\n        this.custom_html = custom_html;\n        this.make();\n    }\n\n    make() {\n        this.parent.innerHTML = `\n            <div class=\"title\"></div>\n            <div class=\"subtitle\"></div>\n            <div class=\"pointer\"></div>\n        `;\n\n        this.hide();\n\n        this.title = this.parent.querySelector('.title');\n        this.subtitle = this.parent.querySelector('.subtitle');\n        this.pointer = this.parent.querySelector('.pointer');\n    }\n\n    show(options) {\n        if (!options.target_element) {\n            throw new Error('target_element is required to show popup');\n        }\n        if (!options.position) {\n            options.position = 'left';\n        }\n        const target_element = options.target_element;\n\n        if (this.custom_html) {\n            let html = this.custom_html(options.task);\n            html += '<div class=\"pointer\"></div>';\n            this.parent.innerHTML = html;\n            this.pointer = this.parent.querySelector('.pointer');\n        } else {\n            // set data\n            this.title.innerHTML = options.title;\n            this.subtitle.innerHTML = options.subtitle;\n            this.parent.style.width = this.parent.clientWidth + 'px';\n        }\n\n        // set position\n        let position_meta;\n        if (target_element instanceof HTMLElement) {\n            position_meta = target_element.getBoundingClientRect();\n        } else if (target_element instanceof SVGElement) {\n            position_meta = options.target_element.getBBox();\n        }\n\n        if (options.position === 'left') {\n            this.parent.style.left =\n                position_meta.x + (position_meta.width + 10) + 'px';\n            this.parent.style.top = position_meta.y + 'px';\n\n            this.pointer.style.transform = 'rotateZ(90deg)';\n            this.pointer.style.left = '-7px';\n            this.pointer.style.top = '2px';\n        }\n\n        // show\n        this.parent.style.opacity = 1;\n    }\n\n    hide() {\n        this.parent.style.opacity = 0;\n        this.parent.style.left = 0;\n    }\n}\n","import date_utils from './date_utils';\nimport { $, createSVG } from './svg_utils';\nimport Bar from './bar';\nimport Arrow from './arrow';\nimport Popup from './popup';\n\nimport './gantt.scss';\n\nconst VIEW_MODE = {\n    QUARTER_DAY: 'Quarter Day',\n    HALF_DAY: 'Half Day',\n    DAY: 'Day',\n    WEEK: 'Week',\n    MONTH: 'Month',\n    YEAR: 'Year',\n};\n\nexport default class Gantt {\n    constructor(wrapper, tasks, options) {\n        this.setup_wrapper(wrapper);\n        this.setup_options(options);\n        this.setup_tasks(tasks);\n        // initialize with default view mode\n        this.change_view_mode();\n        this.bind_events();\n    }\n\n    setup_wrapper(element) {\n        let svg_element, wrapper_element;\n\n        // CSS Selector is passed\n        if (typeof element === 'string') {\n            element = document.querySelector(element);\n        }\n\n        // get the SVGElement\n        if (element instanceof HTMLElement) {\n            wrapper_element = element;\n            svg_element = element.querySelector('svg');\n        } else if (element instanceof SVGElement) {\n            svg_element = element;\n        } else {\n            throw new TypeError(\n                'Frappé Gantt only supports usage of a string CSS selector,' +\n                    \" HTML DOM element or SVG DOM element for the 'element' parameter\"\n            );\n        }\n\n        // svg element\n        if (!svg_element) {\n            // create it\n            this.$svg = createSVG('svg', {\n                append_to: wrapper_element,\n                class: 'gantt',\n            });\n        } else {\n            this.$svg = svg_element;\n            this.$svg.classList.add('gantt');\n        }\n\n        // wrapper element\n        this.$container = document.createElement('div');\n        this.$container.classList.add('gantt-container');\n\n        const parent_element = this.$svg.parentElement;\n        parent_element.appendChild(this.$container);\n        this.$container.appendChild(this.$svg);\n\n        // popup wrapper\n        this.popup_wrapper = document.createElement('div');\n        this.popup_wrapper.classList.add('popup-wrapper');\n        this.$container.appendChild(this.popup_wrapper);\n    }\n\n    setup_options(options) {\n        const default_options = {\n            header_height: 50,\n            column_width: 30,\n            step: 24,\n            view_modes: [...Object.values(VIEW_MODE)],\n            bar_height: 20,\n            bar_corner_radius: 3,\n            arrow_curve: 5,\n            padding: 18,\n            view_mode: 'Day',\n            date_format: 'YYYY-MM-DD',\n            popup_trigger: 'click',\n            custom_popup_html: null,\n            language: 'en',\n        };\n        this.options = Object.assign({}, default_options, options);\n    }\n\n    setup_tasks(tasks) {\n        // prepare tasks\n        this.tasks = tasks.map((task, i) => {\n            // convert to Date objects\n            task._start = date_utils.parse(task.start);\n            task._end = date_utils.parse(task.end);\n\n            // make task invalid if duration too large\n            if (date_utils.diff(task._end, task._start, 'year') > 10) {\n                task.end = null;\n            }\n\n            // cache index\n            task._index = i;\n\n            // invalid dates\n            if (!task.start && !task.end) {\n                const today = date_utils.today();\n                task._start = today;\n                task._end = date_utils.add(today, 2, 'day');\n            }\n\n            if (!task.start && task.end) {\n                task._start = date_utils.add(task._end, -2, 'day');\n            }\n\n            if (task.start && !task.end) {\n                task._end = date_utils.add(task._start, 2, 'day');\n            }\n\n            // if hours is not set, assume the last day is full day\n            // e.g: 2018-09-09 becomes 2018-09-09 23:59:59\n            const task_end_values = date_utils.get_date_values(task._end);\n            if (task_end_values.slice(3).every((d) => d === 0)) {\n                task._end = date_utils.add(task._end, 24, 'hour');\n            }\n\n            // invalid flag\n            if (!task.start || !task.end) {\n                task.invalid = true;\n            }\n\n            // dependencies\n            if (typeof task.dependencies === 'string' || !task.dependencies) {\n                let deps = [];\n                if (task.dependencies) {\n                    deps = task.dependencies\n                        .split(',')\n                        .map((d) => d.trim())\n                        .filter((d) => d);\n                }\n                task.dependencies = deps;\n            }\n\n            // uids\n            if (!task.id) {\n                task.id = generate_id(task);\n            }\n\n            return task;\n        });\n\n        this.setup_dependencies();\n    }\n\n    setup_dependencies() {\n        this.dependency_map = {};\n        for (let t of this.tasks) {\n            for (let d of t.dependencies) {\n                this.dependency_map[d] = this.dependency_map[d] || [];\n                this.dependency_map[d].push(t.id);\n            }\n        }\n    }\n\n    refresh(tasks) {\n        this.setup_tasks(tasks);\n        this.change_view_mode();\n    }\n\n    change_view_mode(mode = this.options.view_mode) {\n        this.update_view_scale(mode);\n        this.setup_dates();\n        this.render();\n        // fire viewmode_change event\n        this.trigger_event('view_change', [mode]);\n    }\n\n    update_view_scale(view_mode) {\n        this.options.view_mode = view_mode;\n\n        if (view_mode === VIEW_MODE.DAY) {\n            this.options.step = 24;\n            this.options.column_width = 38;\n        } else if (view_mode === VIEW_MODE.HALF_DAY) {\n            this.options.step = 24 / 2;\n            this.options.column_width = 38;\n        } else if (view_mode === VIEW_MODE.QUARTER_DAY) {\n            this.options.step = 24 / 4;\n            this.options.column_width = 38;\n        } else if (view_mode === VIEW_MODE.WEEK) {\n            this.options.step = 24 * 7;\n            this.options.column_width = 140;\n        } else if (view_mode === VIEW_MODE.MONTH) {\n            this.options.step = 24 * 30;\n            this.options.column_width = 120;\n        } else if (view_mode === VIEW_MODE.YEAR) {\n            this.options.step = 24 * 365;\n            this.options.column_width = 120;\n        }\n    }\n\n    setup_dates() {\n        this.setup_gantt_dates();\n        this.setup_date_values();\n    }\n\n    setup_gantt_dates() {\n        this.gantt_start = this.gantt_end = null;\n\n        for (let task of this.tasks) {\n            // set global start and end date\n            if (!this.gantt_start || task._start < this.gantt_start) {\n                this.gantt_start = task._start;\n            }\n            if (!this.gantt_end || task._end > this.gantt_end) {\n                this.gantt_end = task._end;\n            }\n        }\n\n        this.gantt_start = date_utils.start_of(this.gantt_start, 'day');\n        this.gantt_end = date_utils.start_of(this.gantt_end, 'day');\n\n        // add date padding on both sides\n        if (this.view_is([VIEW_MODE.QUARTER_DAY, VIEW_MODE.HALF_DAY])) {\n            this.gantt_start = date_utils.add(this.gantt_start, -7, 'day');\n            this.gantt_end = date_utils.add(this.gantt_end, 7, 'day');\n        } else if (this.view_is(VIEW_MODE.MONTH)) {\n            this.gantt_start = date_utils.start_of(this.gantt_start, 'year');\n            this.gantt_end = date_utils.add(this.gantt_end, 1, 'year');\n        } else if (this.view_is(VIEW_MODE.YEAR)) {\n            this.gantt_start = date_utils.add(this.gantt_start, -2, 'year');\n            this.gantt_end = date_utils.add(this.gantt_end, 2, 'year');\n        } else {\n            this.gantt_start = date_utils.add(this.gantt_start, -1, 'month');\n            this.gantt_end = date_utils.add(this.gantt_end, 1, 'month');\n        }\n    }\n\n    setup_date_values() {\n        this.dates = [];\n        let cur_date = null;\n\n        while (cur_date === null || cur_date < this.gantt_end) {\n            if (!cur_date) {\n                cur_date = date_utils.clone(this.gantt_start);\n            } else {\n                if (this.view_is(VIEW_MODE.YEAR)) {\n                    cur_date = date_utils.add(cur_date, 1, 'year');\n                } else if (this.view_is(VIEW_MODE.MONTH)) {\n                    cur_date = date_utils.add(cur_date, 1, 'month');\n                } else {\n                    cur_date = date_utils.add(\n                        cur_date,\n                        this.options.step,\n                        'hour'\n                    );\n                }\n            }\n            this.dates.push(cur_date);\n        }\n    }\n\n    bind_events() {\n        this.bind_grid_click();\n        this.bind_bar_events();\n    }\n\n    render() {\n        this.clear();\n        this.setup_layers();\n        this.make_grid();\n        this.make_dates();\n        this.make_bars();\n        this.make_arrows();\n        this.map_arrows_on_bars();\n        this.set_width();\n        this.set_scroll_position();\n    }\n\n    setup_layers() {\n        this.layers = {};\n        const layers = ['grid', 'date', 'arrow', 'progress', 'bar', 'details'];\n        // make group layers\n        for (let layer of layers) {\n            this.layers[layer] = createSVG('g', {\n                class: layer,\n                append_to: this.$svg,\n            });\n        }\n    }\n\n    make_grid() {\n        this.make_grid_background();\n        this.make_grid_rows();\n        this.make_grid_header();\n        this.make_grid_ticks();\n        this.make_grid_highlights();\n    }\n\n    make_grid_background() {\n        const grid_width = this.dates.length * this.options.column_width;\n        const grid_height =\n            this.options.header_height +\n            this.options.padding +\n            (this.options.bar_height + this.options.padding) *\n                this.tasks.length;\n\n        createSVG('rect', {\n            x: 0,\n            y: 0,\n            width: grid_width,\n            height: grid_height,\n            class: 'grid-background',\n            append_to: this.layers.grid,\n        });\n\n        $.attr(this.$svg, {\n            height: grid_height + this.options.padding + 100,\n            width: '100%',\n        });\n    }\n\n    make_grid_rows() {\n        const rows_layer = createSVG('g', { append_to: this.layers.grid });\n        const lines_layer = createSVG('g', { append_to: this.layers.grid });\n\n        const row_width = this.dates.length * this.options.column_width;\n        const row_height = this.options.bar_height + this.options.padding;\n\n        let row_y = this.options.header_height + this.options.padding / 2;\n\n        for (let task of this.tasks) {\n            createSVG('rect', {\n                x: 0,\n                y: row_y,\n                width: row_width,\n                height: row_height,\n                class: 'grid-row',\n                append_to: rows_layer,\n            });\n\n            createSVG('line', {\n                x1: 0,\n                y1: row_y + row_height,\n                x2: row_width,\n                y2: row_y + row_height,\n                class: 'row-line',\n                append_to: lines_layer,\n            });\n\n            row_y += this.options.bar_height + this.options.padding;\n        }\n    }\n\n    make_grid_header() {\n        const header_width = this.dates.length * this.options.column_width;\n        const header_height = this.options.header_height + 10;\n        createSVG('rect', {\n            x: 0,\n            y: 0,\n            width: header_width,\n            height: header_height,\n            class: 'grid-header',\n            append_to: this.layers.grid,\n        });\n    }\n\n    make_grid_ticks() {\n        let tick_x = 0;\n        let tick_y = this.options.header_height + this.options.padding / 2;\n        let tick_height =\n            (this.options.bar_height + this.options.padding) *\n            this.tasks.length;\n\n        for (let date of this.dates) {\n            let tick_class = 'tick';\n            // thick tick for monday\n            if (this.view_is(VIEW_MODE.DAY) && date.getDate() === 1) {\n                tick_class += ' thick';\n            }\n            // thick tick for first week\n            if (\n                this.view_is(VIEW_MODE.WEEK) &&\n                date.getDate() >= 1 &&\n                date.getDate() < 8\n            ) {\n                tick_class += ' thick';\n            }\n            // thick ticks for quarters\n            if (\n                this.view_is(VIEW_MODE.MONTH) &&\n                (date.getMonth() + 1) % 3 === 0\n            ) {\n                tick_class += ' thick';\n            }\n\n            createSVG('path', {\n                d: `M ${tick_x} ${tick_y} v ${tick_height}`,\n                class: tick_class,\n                append_to: this.layers.grid,\n            });\n\n            if (this.view_is(VIEW_MODE.MONTH)) {\n                tick_x +=\n                    (date_utils.get_days_in_month(date) *\n                        this.options.column_width) /\n                    30;\n            } else {\n                tick_x += this.options.column_width;\n            }\n        }\n    }\n\n    make_grid_highlights() {\n        // highlight today's date\n        if (this.view_is(VIEW_MODE.DAY)) {\n            const x =\n                (date_utils.diff(date_utils.today(), this.gantt_start, 'hour') /\n                    this.options.step) *\n                this.options.column_width;\n            const y = 0;\n\n            const width = this.options.column_width;\n            const height =\n                (this.options.bar_height + this.options.padding) *\n                    this.tasks.length +\n                this.options.header_height +\n                this.options.padding / 2;\n\n            createSVG('rect', {\n                x,\n                y,\n                width,\n                height,\n                class: 'today-highlight',\n                append_to: this.layers.grid,\n            });\n        }\n    }\n\n    make_dates() {\n        for (let date of this.get_dates_to_draw()) {\n            createSVG('text', {\n                x: date.lower_x,\n                y: date.lower_y,\n                innerHTML: date.lower_text,\n                class: 'lower-text',\n                append_to: this.layers.date,\n            });\n\n            if (date.upper_text) {\n                const $upper_text = createSVG('text', {\n                    x: date.upper_x,\n                    y: date.upper_y,\n                    innerHTML: date.upper_text,\n                    class: 'upper-text',\n                    append_to: this.layers.date,\n                });\n\n                // remove out-of-bound dates\n                if (\n                    $upper_text.getBBox().x2 > this.layers.grid.getBBox().width\n                ) {\n                    $upper_text.remove();\n                }\n            }\n        }\n    }\n\n    get_dates_to_draw() {\n        let last_date = null;\n        const dates = this.dates.map((date, i) => {\n            const d = this.get_date_info(date, last_date, i);\n            last_date = date;\n            return d;\n        });\n        return dates;\n    }\n\n    get_date_info(date, last_date, i) {\n        if (!last_date) {\n            last_date = date_utils.add(date, 1, 'year');\n        }\n        const date_text = {\n            'Quarter Day_lower': date_utils.format(\n                date,\n                'HH',\n                this.options.language\n            ),\n            'Half Day_lower': date_utils.format(\n                date,\n                'HH',\n                this.options.language\n            ),\n            Day_lower:\n                date.getDate() !== last_date.getDate()\n                    ? date_utils.format(date, 'D', this.options.language)\n                    : '',\n            Week_lower:\n                date.getMonth() !== last_date.getMonth()\n                    ? date_utils.format(date, 'D MMM', this.options.language)\n                    : date_utils.format(date, 'D', this.options.language),\n            Month_lower: date_utils.format(date, 'MMMM', this.options.language),\n            Year_lower: date_utils.format(date, 'YYYY', this.options.language),\n            'Quarter Day_upper':\n                date.getDate() !== last_date.getDate()\n                    ? date_utils.format(date, 'D MMM', this.options.language)\n                    : '',\n            'Half Day_upper':\n                date.getDate() !== last_date.getDate()\n                    ? date.getMonth() !== last_date.getMonth()\n                        ? date_utils.format(\n                              date,\n                              'D MMM',\n                              this.options.language\n                          )\n                        : date_utils.format(date, 'D', this.options.language)\n                    : '',\n            Day_upper:\n                date.getMonth() !== last_date.getMonth()\n                    ? date_utils.format(date, 'MMMM', this.options.language)\n                    : '',\n            Week_upper:\n                date.getMonth() !== last_date.getMonth()\n                    ? date_utils.format(date, 'MMMM', this.options.language)\n                    : '',\n            Month_upper:\n                date.getFullYear() !== last_date.getFullYear()\n                    ? date_utils.format(date, 'YYYY', this.options.language)\n                    : '',\n            Year_upper:\n                date.getFullYear() !== last_date.getFullYear()\n                    ? date_utils.format(date, 'YYYY', this.options.language)\n                    : '',\n        };\n\n        const base_pos = {\n            x: i * this.options.column_width,\n            lower_y: this.options.header_height,\n            upper_y: this.options.header_height - 25,\n        };\n\n        const x_pos = {\n            'Quarter Day_lower': (this.options.column_width * 4) / 2,\n            'Quarter Day_upper': 0,\n            'Half Day_lower': (this.options.column_width * 2) / 2,\n            'Half Day_upper': 0,\n            Day_lower: this.options.column_width / 2,\n            Day_upper: (this.options.column_width * 30) / 2,\n            Week_lower: 0,\n            Week_upper: (this.options.column_width * 4) / 2,\n            Month_lower: this.options.column_width / 2,\n            Month_upper: (this.options.column_width * 12) / 2,\n            Year_lower: this.options.column_width / 2,\n            Year_upper: (this.options.column_width * 30) / 2,\n        };\n\n        return {\n            upper_text: date_text[`${this.options.view_mode}_upper`],\n            lower_text: date_text[`${this.options.view_mode}_lower`],\n            upper_x: base_pos.x + x_pos[`${this.options.view_mode}_upper`],\n            upper_y: base_pos.upper_y,\n            lower_x: base_pos.x + x_pos[`${this.options.view_mode}_lower`],\n            lower_y: base_pos.lower_y,\n        };\n    }\n\n    make_bars() {\n        this.bars = this.tasks.map((task) => {\n            const bar = new Bar(this, task);\n            this.layers.bar.appendChild(bar.group);\n            return bar;\n        });\n    }\n\n    make_arrows() {\n        this.arrows = [];\n        for (let task of this.tasks) {\n            let arrows = [];\n            arrows = task.dependencies\n                .map((task_id) => {\n                    const dependency = this.get_task(task_id);\n                    if (!dependency) return;\n                    const arrow = new Arrow(\n                        this,\n                        this.bars[dependency._index], // from_task\n                        this.bars[task._index] // to_task\n                    );\n                    this.layers.arrow.appendChild(arrow.element);\n                    return arrow;\n                })\n                .filter(Boolean); // filter falsy values\n            this.arrows = this.arrows.concat(arrows);\n        }\n    }\n\n    map_arrows_on_bars() {\n        for (let bar of this.bars) {\n            bar.arrows = this.arrows.filter((arrow) => {\n                return (\n                    arrow.from_task.task.id === bar.task.id ||\n                    arrow.to_task.task.id === bar.task.id\n                );\n            });\n        }\n    }\n\n    set_width() {\n        const cur_width = this.$svg.getBoundingClientRect().width;\n        const actual_width = this.$svg\n            .querySelector('.grid .grid-row')\n            .getAttribute('width');\n        if (cur_width < actual_width) {\n            this.$svg.setAttribute('width', actual_width);\n        }\n    }\n\n    set_scroll_position() {\n        const parent_element = this.$svg.parentElement;\n        if (!parent_element) return;\n\n        const hours_before_first_task = date_utils.diff(\n            this.get_oldest_starting_date(),\n            this.gantt_start,\n            'hour'\n        );\n\n        const scroll_pos =\n            (hours_before_first_task / this.options.step) *\n                this.options.column_width -\n            this.options.column_width;\n\n        parent_element.scrollLeft = scroll_pos;\n    }\n\n    bind_grid_click() {\n        $.on(\n            this.$svg,\n            this.options.popup_trigger,\n            '.grid-row, .grid-header',\n            () => {\n                this.unselect_all();\n                this.hide_popup();\n            }\n        );\n    }\n\n    bind_bar_events() {\n        let is_dragging = false;\n        let x_on_start = 0;\n        let y_on_start = 0;\n        let is_resizing_left = false;\n        let is_resizing_right = false;\n        let parent_bar_id = null;\n        let bars = []; // instanceof Bar\n        this.bar_being_dragged = null;\n\n        function action_in_progress() {\n            return is_dragging || is_resizing_left || is_resizing_right;\n        }\n\n        $.on(this.$svg, 'mousedown', '.bar-wrapper, .handle', (e, element) => {\n            const bar_wrapper = $.closest('.bar-wrapper', element);\n\n            if (element.classList.contains('left')) {\n                is_resizing_left = true;\n            } else if (element.classList.contains('right')) {\n                is_resizing_right = true;\n            } else if (element.classList.contains('bar-wrapper')) {\n                is_dragging = true;\n            }\n\n            bar_wrapper.classList.add('active');\n\n            x_on_start = e.offsetX;\n            y_on_start = e.offsetY;\n\n            parent_bar_id = bar_wrapper.getAttribute('data-id');\n            const ids = [\n                parent_bar_id,\n                ...this.get_all_dependent_tasks(parent_bar_id),\n            ];\n            bars = ids.map((id) => this.get_bar(id));\n\n            this.bar_being_dragged = parent_bar_id;\n\n            bars.forEach((bar) => {\n                const $bar = bar.$bar;\n                $bar.ox = $bar.getX();\n                $bar.oy = $bar.getY();\n                $bar.owidth = $bar.getWidth();\n                $bar.finaldx = 0;\n            });\n        });\n\n        $.on(this.$svg, 'mousemove', (e) => {\n            if (!action_in_progress()) return;\n            const dx = e.offsetX - x_on_start;\n            const dy = e.offsetY - y_on_start;\n\n            bars.forEach((bar) => {\n                const $bar = bar.$bar;\n                $bar.finaldx = this.get_snap_position(dx);\n                this.hide_popup();\n                if (is_resizing_left) {\n                    if (parent_bar_id === bar.task.id) {\n                        bar.update_bar_position({\n                            x: $bar.ox + $bar.finaldx,\n                            width: $bar.owidth - $bar.finaldx,\n                        });\n                    } else {\n                        bar.update_bar_position({\n                            x: $bar.ox + $bar.finaldx,\n                        });\n                    }\n                } else if (is_resizing_right) {\n                    if (parent_bar_id === bar.task.id) {\n                        bar.update_bar_position({\n                            width: $bar.owidth + $bar.finaldx,\n                        });\n                    }\n                } else if (is_dragging) {\n                    bar.update_bar_position({ x: $bar.ox + $bar.finaldx });\n                }\n            });\n        });\n\n        document.addEventListener('mouseup', (e) => {\n            if (is_dragging || is_resizing_left || is_resizing_right) {\n                bars.forEach((bar) => bar.group.classList.remove('active'));\n            }\n\n            is_dragging = false;\n            is_resizing_left = false;\n            is_resizing_right = false;\n        });\n\n        $.on(this.$svg, 'mouseup', (e) => {\n            this.bar_being_dragged = null;\n            bars.forEach((bar) => {\n                const $bar = bar.$bar;\n                if (!$bar.finaldx) return;\n                bar.date_changed();\n                bar.set_action_completed();\n            });\n        });\n\n        this.bind_bar_progress();\n    }\n\n    bind_bar_progress() {\n        let x_on_start = 0;\n        let y_on_start = 0;\n        let is_resizing = null;\n        let bar = null;\n        let $bar_progress = null;\n        let $bar = null;\n\n        $.on(this.$svg, 'mousedown', '.handle.progress', (e, handle) => {\n            is_resizing = true;\n            x_on_start = e.offsetX;\n            y_on_start = e.offsetY;\n\n            const $bar_wrapper = $.closest('.bar-wrapper', handle);\n            const id = $bar_wrapper.getAttribute('data-id');\n            bar = this.get_bar(id);\n\n            $bar_progress = bar.$bar_progress;\n            $bar = bar.$bar;\n\n            $bar_progress.finaldx = 0;\n            $bar_progress.owidth = $bar_progress.getWidth();\n            $bar_progress.min_dx = -$bar_progress.getWidth();\n            $bar_progress.max_dx = $bar.getWidth() - $bar_progress.getWidth();\n        });\n\n        $.on(this.$svg, 'mousemove', (e) => {\n            if (!is_resizing) return;\n            let dx = e.offsetX - x_on_start;\n            let dy = e.offsetY - y_on_start;\n\n            if (dx > $bar_progress.max_dx) {\n                dx = $bar_progress.max_dx;\n            }\n            if (dx < $bar_progress.min_dx) {\n                dx = $bar_progress.min_dx;\n            }\n\n            const $handle = bar.$handle_progress;\n            $.attr($bar_progress, 'width', $bar_progress.owidth + dx);\n            $.attr($handle, 'points', bar.get_progress_polygon_points());\n            $bar_progress.finaldx = dx;\n        });\n\n        $.on(this.$svg, 'mouseup', () => {\n            is_resizing = false;\n            if (!($bar_progress && $bar_progress.finaldx)) return;\n            bar.progress_changed();\n            bar.set_action_completed();\n        });\n    }\n\n    get_all_dependent_tasks(task_id) {\n        let out = [];\n        let to_process = [task_id];\n        while (to_process.length) {\n            const deps = to_process.reduce((acc, curr) => {\n                acc = acc.concat(this.dependency_map[curr]);\n                return acc;\n            }, []);\n\n            out = out.concat(deps);\n            to_process = deps.filter((d) => !to_process.includes(d));\n        }\n\n        return out.filter(Boolean);\n    }\n\n    get_snap_position(dx) {\n        let odx = dx,\n            rem,\n            position;\n\n        if (this.view_is(VIEW_MODE.WEEK)) {\n            rem = dx % (this.options.column_width / 7);\n            position =\n                odx -\n                rem +\n                (rem < this.options.column_width / 14\n                    ? 0\n                    : this.options.column_width / 7);\n        } else if (this.view_is(VIEW_MODE.MONTH)) {\n            rem = dx % (this.options.column_width / 30);\n            position =\n                odx -\n                rem +\n                (rem < this.options.column_width / 60\n                    ? 0\n                    : this.options.column_width / 30);\n        } else {\n            rem = dx % this.options.column_width;\n            position =\n                odx -\n                rem +\n                (rem < this.options.column_width / 2\n                    ? 0\n                    : this.options.column_width);\n        }\n        return position;\n    }\n\n    unselect_all() {\n        [...this.$svg.querySelectorAll('.bar-wrapper')].forEach((el) => {\n            el.classList.remove('active');\n        });\n    }\n\n    view_is(modes) {\n        if (typeof modes === 'string') {\n            return this.options.view_mode === modes;\n        }\n\n        if (Array.isArray(modes)) {\n            return modes.some((mode) => this.options.view_mode === mode);\n        }\n\n        return false;\n    }\n\n    get_task(id) {\n        return this.tasks.find((task) => {\n            return task.id === id;\n        });\n    }\n\n    get_bar(id) {\n        return this.bars.find((bar) => {\n            return bar.task.id === id;\n        });\n    }\n\n    show_popup(options) {\n        if (!this.popup) {\n            this.popup = new Popup(\n                this.popup_wrapper,\n                this.options.custom_popup_html\n            );\n        }\n        this.popup.show(options);\n    }\n\n    hide_popup() {\n        this.popup && this.popup.hide();\n    }\n\n    trigger_event(event, args) {\n        if (this.options['on_' + event]) {\n            this.options['on_' + event].apply(null, args);\n        }\n    }\n\n    /**\n     * Gets the oldest starting date from the list of tasks\n     *\n     * @returns Date\n     * @memberof Gantt\n     */\n    get_oldest_starting_date() {\n        return this.tasks\n            .map((task) => task._start)\n            .reduce((prev_date, cur_date) =>\n                cur_date <= prev_date ? cur_date : prev_date\n            );\n    }\n\n    /**\n     * Clear all elements from the parent svg element\n     *\n     * @memberof Gantt\n     */\n    clear() {\n        this.$svg.innerHTML = '';\n    }\n}\n\nGantt.VIEW_MODE = VIEW_MODE;\n\nfunction generate_id(task) {\n    return task.name + '_' + Math.random().toString(36).slice(2, 12);\n}\n","import 'frappe-gantt/dist/frappe-gantt.css';\r\nimport Gantt from 'frappe-gantt';\r\n\r\nconst tasks = [\r\n    {\r\n        id: 'Task 1',\r\n        name: 'Redesign website',\r\n        start: '2023-09-01',\r\n        end: '2023-09-05',\r\n        progress: 20,\r\n        dependencies: ''\r\n    },\r\n    {\r\n        id: 'Task 2',\r\n        name: 'Develop Backend',\r\n        start: '2023-09-06',\r\n        end: '2023-09-10',\r\n        progress: 50,\r\n        dependencies: 'Task 1'\r\n    }\r\n];\r\n\r\nnew Gantt(\"#gantt\", tasks);\r\n"]}